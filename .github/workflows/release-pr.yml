concurrency:
  group: "create-release-pr-${{ github.sha }}"
jobs:
  check:
    if: "${{ !fromJSON(inputs.skip_validation) }}"
    runs-on: "ubuntu-latest"
    steps:
    - name: "pull code to release"
      uses: "actions/checkout@v3"
      with:
        path: "release"
        repository: "${{ inputs.release_repo }}"
    - name: "pull release library code"
      uses: "actions/checkout@v3"
      with:
        path: "lib"
        repository: "grafana/loki-release"
    - name: "setup go"
      uses: "actions/setup-go@v4"
      with:
        cache-dependency-path: "release/go.sum"
        go-version-file: "release/go.mod"
    - name: "setup node"
      uses: "actions/setup-node@v4"
      with:
        node-version: 20
    - name: "install dependencies"
      run: |
        go install github.com/bufbuild/buf/cmd/buf@v1.4.0
        go install github.com/golang/protobuf/protoc-gen-go@v1.3.1
        go install github.com/gogo/protobuf/protoc-gen-gogoslick@v1.3.0
        go install github.com/fatih/faillint@v1.11.0
        go install golang.org/x/tools/cmd/goimports@v0.7.0
        go install github.com/jsonnet-bundler/jsonnet-bundler/cmd/jb@v0.4.0
        go install github.com/monitoring-mixins/mixtool/cmd/mixtool@bca3066
        go install github.com/google/go-jsonnet/cmd/jsonnet@v0.18.0
        go install github.com/google/go-jsonnet/cmd/jsonnet-lint@v0.18.0
        
        sudo apt update
        sudo apt install -qy musl gnupg ragel \
          file zip unzip jq gettext \
          protobuf-compiler libprotobuf-dev \
          libsystemd-dev jq
      shell: "bash"
    - name: "install golangci-lint"
      uses: "./lib/actions/install-binary"
      with:
        binary: "golangci-lint"
        download_url: "https://github.com/golangci/golangci-lint/releases/download/v${version}/golangci-lint-${version}-linux-amd64.tar.gz"
        smoke_test: "${binary} version"
        tarball_binary_path: "*/${binary}"
        version: "1.55.1"
    - name: "install shellcheck"
      uses: "./lib/actions/install-binary"
      with:
        binary: "shellcheck"
        download_url: "https://github.com/koalaman/shellcheck/releases/download/v${version}/shellcheck-v${version}.linux.x86_64.tar.xz"
        smoke_test: "${binary} --version"
        tar_args: "xvf"
        tarball_binary_path: "*/${binary}"
        version: "0.9.0"
    - name: "install helm"
      uses: "./lib/actions/install-binary"
      with:
        binary: "helm"
        download_url: "https://get.helm.sh/helm-v${version}-linux-amd64.tar.gz"
        smoke_test: "${binary} version"
        tarball_binary_path: "*/${binary}"
        version: "3.2.3"
    - name: "install helm-docs"
      uses: "./lib/actions/install-binary"
      with:
        binary: "helm-docs"
        download_url: "https://github.com/norwoodj/helm-docs/releases/download/v${version}/helm-docs_Linux_x86_64.tar.gz"
        smoke_test: "${binary} --version"
        tarball_binary_path: "${binary}"
        version: "1.11.2"
    - name: "install jsonnetfmt"
      uses: "./lib/actions/install-binary"
      with:
        binary: "jsonnetfmt"
        download_url: "https://github.com/google/go-jsonnet/releases/download/v${version}/go-jsonnet_${version}_Linux_x86_64.tar.gz"
        smoke_test: "${binary} --version"
        tarball_binary_path: "${binary}"
        version: "0.18.0"
    - name: "check generated files"
      run: "make BUILD_IN_CONTAINER=false check-generated-files"
      shell: "bash"
      working-directory: "release"
    - name: "check mod"
      run: "make BUILD_IN_CONTAINER=false check-mod"
      shell: "bash"
      working-directory: "release"
    - name: "shellcheck"
      run: "make BUILD_IN_CONTAINER=false lint-scripts"
      shell: "bash"
      working-directory: "release"
    - name: "check docs"
      run: "make BUILD_IN_CONTAINER=false check-doc"
      shell: "bash"
      working-directory: "release"
    - name: "validate example configs"
      run: "make BUILD_IN_CONTAINER=false check-example-config-doc"
      shell: "bash"
      working-directory: "release"
    - name: "check helm reference doc"
      run: "make BUILD_IN_CONTAINER=false documentation-helm-reference-check"
      shell: "bash"
      working-directory: "release"
  create-release-pr:
    needs:
    - "dist"
    - "loki-image"
    - "promtail-image"
    runs-on: "ubuntu-latest"
    steps:
    - name: "pull code to release"
      uses: "actions/checkout@v3"
      with:
        path: "release"
        repository: "${{ inputs.release_repo }}"
    - name: "pull release library code"
      uses: "actions/checkout@v3"
      with:
        path: "lib"
        repository: "grafana/loki-release"
    - name: "setup node"
      uses: "actions/setup-node@v4"
      with:
        node-version: 20
    - id: "extract_branch"
      name: "extract branch name"
      run: |
        echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
      shell: "bash"
      working-directory: "release"
    - env:
        SHA: "${{ github.sha }}"
      id: "release"
      name: "release please"
      run: |
        npm install
        npm exec -- release-please release-pr \
          --pull-request-footer "Merging this PR will release the [artifacts](https://console.cloud.google.com/storage/browser/loki-build-artifacts/${SHA}) of ${SHA}" \
          --release-type simple \
          --repo-url="${{ inputs.release_repo }}" \
          --target-branch "${{ steps.extract_branch.outputs.branch }}" \
          --token="${{ secrets.GH_TOKEN }}"
      shell: "bash"
      working-directory: "lib"
  dist:
    needs:
    - "test"
    - "lint"
    - "check"
    runs-on: "ubuntu-latest"
    steps:
    - name: "pull code to release"
      uses: "actions/checkout@v3"
      with:
        path: "release"
        repository: "${{ inputs.release_repo }}"
    - name: "setup go"
      uses: "actions/setup-go@v4"
      with:
        cache-dependency-path: "release/go.sum"
        go-version-file: "release/go.mod"
    - env:
        ACTIONS_STEP_DEBUG: "true"
      name: "auth gcs"
      uses: "google-github-actions/auth@v2"
      with:
        credentials_json: "${{ secrets.GCS_SERVICE_ACCOUNT_KEY }}"
    - name: "install dependencies"
      run: |
        go install github.com/mitchellh/gox@9f71238
        go install github.com/bufbuild/buf/cmd/buf@v1.4.0
        go install github.com/golang/protobuf/protoc-gen-go@v1.3.1
        go install github.com/gogo/protobuf/protoc-gen-gogoslick@v1.3.0
        
        sudo apt update
        sudo apt install -qy musl gnupg ragel \
          file zip unzip jq gettext \
          protobuf-compiler libprotobuf-dev \
          libsystemd-dev jq
      shell: "bash"
    - name: "build artifacts"
      run: "make BUILD_IN_CONTAINER=false SKIP_ARM=true dist"
      shell: "bash"
      working-directory: "release"
    - name: "upload build artifacts"
      uses: "google-github-actions/upload-cloud-storage@v1"
      with:
        destination: "loki-build-artifacts/${{ github.sha }}"
        path: "release/dist"
        process_gcloudignore: false
  lint:
    if: "${{ !fromJSON(inputs.skip_validation) }}"
    runs-on: "ubuntu-latest"
    steps:
    - name: "pull code to release"
      uses: "actions/checkout@v3"
      with:
        path: "release"
        repository: "${{ inputs.release_repo }}"
    - name: "pull release library code"
      uses: "actions/checkout@v3"
      with:
        path: "lib"
        repository: "grafana/loki-release"
    - name: "setup go"
      uses: "actions/setup-go@v4"
      with:
        cache-dependency-path: "release/go.sum"
        go-version-file: "release/go.mod"
    - name: "setup node"
      uses: "actions/setup-node@v4"
      with:
        node-version: 20
    - name: "install dependencies"
      run: |
        go install github.com/bufbuild/buf/cmd/buf@v1.4.0
        go install github.com/golang/protobuf/protoc-gen-go@v1.3.1
        go install github.com/gogo/protobuf/protoc-gen-gogoslick@v1.3.0
        go install github.com/fatih/faillint@v1.11.0
        go install golang.org/x/tools/cmd/goimports@v0.7.0
        go install github.com/jsonnet-bundler/jsonnet-bundler/cmd/jb@v0.4.0
        go install github.com/monitoring-mixins/mixtool/cmd/mixtool@bca3066
        go install github.com/google/go-jsonnet/cmd/jsonnet@v0.18.0
        go install github.com/google/go-jsonnet/cmd/jsonnet-lint@v0.18.0
        
        sudo apt update
        sudo apt install -qy musl gnupg ragel \
          file zip unzip jq gettext \
          protobuf-compiler libprotobuf-dev \
          libsystemd-dev jq
      shell: "bash"
    - name: "install golangci-lint"
      uses: "./lib/actions/install-binary"
      with:
        binary: "golangci-lint"
        download_url: "https://github.com/golangci/golangci-lint/releases/download/v${version}/golangci-lint-${version}-linux-amd64.tar.gz"
        smoke_test: "${binary} version"
        tarball_binary_path: "*/${binary}"
        version: "1.55.1"
    - name: "install shellcheck"
      uses: "./lib/actions/install-binary"
      with:
        binary: "shellcheck"
        download_url: "https://github.com/koalaman/shellcheck/releases/download/v${version}/shellcheck-v${version}.linux.x86_64.tar.xz"
        smoke_test: "${binary} --version"
        tar_args: "xvf"
        tarball_binary_path: "*/${binary}"
        version: "0.9.0"
    - name: "install helm"
      uses: "./lib/actions/install-binary"
      with:
        binary: "helm"
        download_url: "https://get.helm.sh/helm-v${version}-linux-amd64.tar.gz"
        smoke_test: "${binary} version"
        tarball_binary_path: "*/${binary}"
        version: "3.2.3"
    - name: "install helm-docs"
      uses: "./lib/actions/install-binary"
      with:
        binary: "helm-docs"
        download_url: "https://github.com/norwoodj/helm-docs/releases/download/v${version}/helm-docs_Linux_x86_64.tar.gz"
        smoke_test: "${binary} --version"
        tarball_binary_path: "${binary}"
        version: "1.11.2"
    - name: "install jsonnetfmt"
      uses: "./lib/actions/install-binary"
      with:
        binary: "jsonnetfmt"
        download_url: "https://github.com/google/go-jsonnet/releases/download/v${version}/go-jsonnet_${version}_Linux_x86_64.tar.gz"
        smoke_test: "${binary} --version"
        tarball_binary_path: "${binary}"
        version: "0.18.0"
    - name: "lint"
      run: "make BUILD_IN_CONTAINER=false lint"
      shell: "bash"
      working-directory: "release"
    - name: "lint jsonnet"
      run: "make BUILD_IN_CONTAINER=false lint-jsonnet"
      shell: "bash"
      working-directory: "release"
  loki-image:
    needs:
    - "test"
    - "lint"
    - "check"
    runs-on: "ubuntu-latest"
    steps:
    - name: "pull code to release"
      uses: "actions/checkout@v3"
      with:
        path: "release"
        repository: "${{ inputs.release_repo }}"
    - name: "setup go"
      uses: "actions/setup-go@v4"
      with:
        cache-dependency-path: "release/go.sum"
        go-version-file: "release/go.mod"
    - name: "Set up QEMU"
      uses: "docker/setup-qemu-action@v3"
    - name: "set up docker buildx"
      uses: "docker/setup-buildx-action@v3"
    - id: "parse-metadata"
      name: "parse image metadata"
      run: |
        mkdir -p dist
        
        platform="$(echo "${{ matrix.platform}}" |  sed  "s/\(.*\)\/\(.*\)/\1-\2/")"
        echo "platform=${platform}" >> $GITHUB_OUTPUT
        
        version=$(jq -r '."cmd/loki"' .release-please-manifest.json)
        echo "version=${version}" >> $GITHUB_OUTPUT
      shell: "bash"
      working-directory: "release"
    - if: "${{ inputs.release_repo == 'grafana/loki' }}"
      name: "Build and export"
      uses: "docker/build-push-action@v5"
      with:
        context: "release"
        file: "release/cmd/loki/Dockerfile"
        outputs: "type=docker,dest=release/images/loki-${{ steps.parse-metadata.outputs.version}}-${{ steps.parse-metadata.outputs.platform }}.tar"
        platforms: "${{ matrix.platform }}"
        tags: "grafana/loki:${{ steps.parse-metadata.outputs.version }}"
    - if: "${{ inputs.release_repo == 'grafana/loki' }}"
      name: "upload artifacts"
      uses: "actions/upload-artifact@v3"
      with:
        name: "loki-image-${{ steps.parse-metadata.outputs.version}}-${{ steps.parse-metadata.outputs.platform }}"
        path: "release/images/loki-${{ steps.parse-metadata.outputs.version}}-${{ steps.parse-metadata.outputs.platform }}.tar"
    strategy:
      fail-fast: true
      matrix:
        platform:
        - "linux/amd64"
        - "linux/arm64"
        - "linux/arm"
  promtail-image:
    needs:
    - "test"
    - "lint"
    - "check"
    runs-on: "ubuntu-latest"
    steps:
    - name: "pull code to release"
      uses: "actions/checkout@v3"
      with:
        path: "release"
        repository: "${{ inputs.release_repo }}"
    - name: "setup go"
      uses: "actions/setup-go@v4"
      with:
        cache-dependency-path: "release/go.sum"
        go-version-file: "release/go.mod"
    - name: "Set up QEMU"
      uses: "docker/setup-qemu-action@v3"
    - name: "set up docker buildx"
      uses: "docker/setup-buildx-action@v3"
    - id: "parse-metadata"
      name: "parse image metadata"
      run: |
        mkdir -p dist
        
        platform="$(echo "${{ matrix.platform}}" |  sed  "s/\(.*\)\/\(.*\)/\1-\2/")"
        echo "platform=${platform}" >> $GITHUB_OUTPUT
        
        version=$(jq -r '."clients/cmd/promtail"' .release-please-manifest.json)
        echo "version=${version}" >> $GITHUB_OUTPUT
      shell: "bash"
      working-directory: "release"
    - if: "${{ inputs.release_repo == 'grafana/loki' }}"
      name: "Build and export"
      uses: "docker/build-push-action@v5"
      with:
        context: "release"
        file: "release/clients/cmd/promtail/Dockerfile"
        outputs: "type=docker,dest=release/images/promtail-${{ steps.parse-metadata.outputs.version}}-${{ steps.parse-metadata.outputs.platform }}.tar"
        platforms: "${{ matrix.platform }}"
        tags: "grafana/promtail:${{ steps.parse-metadata.outputs.version }}"
    - if: "${{ inputs.release_repo == 'grafana/loki' }}"
      name: "upload artifacts"
      uses: "actions/upload-artifact@v3"
      with:
        name: "promtail-image-${{ steps.parse-metadata.outputs.version}}-${{ steps.parse-metadata.outputs.platform }}"
        path: "release/images/promtail-${{ steps.parse-metadata.outputs.version}}-${{ steps.parse-metadata.outputs.platform }}.tar"
    strategy:
      fail-fast: true
      matrix:
        platform:
        - "linux/amd64"
        - "linux/arm64"
        - "linux/arm"
  test:
    if: "${{ !fromJSON(inputs.skip_validation) }}"
    runs-on: "ubuntu-latest"
    steps:
    - name: "pull code to release"
      uses: "actions/checkout@v3"
      with:
        path: "release"
        repository: "${{ inputs.release_repo }}"
    - name: "pull release library code"
      uses: "actions/checkout@v3"
      with:
        path: "lib"
        repository: "grafana/loki-release"
    - name: "setup go"
      uses: "actions/setup-go@v4"
      with:
        cache-dependency-path: "release/go.sum"
        go-version-file: "release/go.mod"
    - name: "setup node"
      uses: "actions/setup-node@v4"
      with:
        node-version: 20
    - name: "install dependencies"
      run: |
        go install github.com/bufbuild/buf/cmd/buf@v1.4.0
        go install github.com/golang/protobuf/protoc-gen-go@v1.3.1
        go install github.com/gogo/protobuf/protoc-gen-gogoslick@v1.3.0
        go install github.com/fatih/faillint@v1.11.0
        go install golang.org/x/tools/cmd/goimports@v0.7.0
        go install github.com/jsonnet-bundler/jsonnet-bundler/cmd/jb@v0.4.0
        go install github.com/monitoring-mixins/mixtool/cmd/mixtool@bca3066
        go install github.com/google/go-jsonnet/cmd/jsonnet@v0.18.0
        go install github.com/google/go-jsonnet/cmd/jsonnet-lint@v0.18.0
        
        sudo apt update
        sudo apt install -qy musl gnupg ragel \
          file zip unzip jq gettext \
          protobuf-compiler libprotobuf-dev \
          libsystemd-dev jq
      shell: "bash"
    - name: "install golangci-lint"
      uses: "./lib/actions/install-binary"
      with:
        binary: "golangci-lint"
        download_url: "https://github.com/golangci/golangci-lint/releases/download/v${version}/golangci-lint-${version}-linux-amd64.tar.gz"
        smoke_test: "${binary} version"
        tarball_binary_path: "*/${binary}"
        version: "1.55.1"
    - name: "install shellcheck"
      uses: "./lib/actions/install-binary"
      with:
        binary: "shellcheck"
        download_url: "https://github.com/koalaman/shellcheck/releases/download/v${version}/shellcheck-v${version}.linux.x86_64.tar.xz"
        smoke_test: "${binary} --version"
        tar_args: "xvf"
        tarball_binary_path: "*/${binary}"
        version: "0.9.0"
    - name: "install helm"
      uses: "./lib/actions/install-binary"
      with:
        binary: "helm"
        download_url: "https://get.helm.sh/helm-v${version}-linux-amd64.tar.gz"
        smoke_test: "${binary} version"
        tarball_binary_path: "*/${binary}"
        version: "3.2.3"
    - name: "install helm-docs"
      uses: "./lib/actions/install-binary"
      with:
        binary: "helm-docs"
        download_url: "https://github.com/norwoodj/helm-docs/releases/download/v${version}/helm-docs_Linux_x86_64.tar.gz"
        smoke_test: "${binary} --version"
        tarball_binary_path: "${binary}"
        version: "1.11.2"
    - name: "install jsonnetfmt"
      uses: "./lib/actions/install-binary"
      with:
        binary: "jsonnetfmt"
        download_url: "https://github.com/google/go-jsonnet/releases/download/v${version}/go-jsonnet_${version}_Linux_x86_64.tar.gz"
        smoke_test: "${binary} --version"
        tarball_binary_path: "${binary}"
        version: "0.18.0"
    - name: "test"
      run: "make BUILD_IN_CONTAINER=false test"
      shell: "bash"
      working-directory: "release"
name: "create release PR"
"on":
  workflow_call:
    inputs:
      release_repo:
        default: "grafana/loki"
        description: "repo to make release PRs against"
        required: false
        type: "string"
      skip_validation:
        default: false
        description: "skip validation steps"
        required: false
        type: "boolean"
    secrets:
      GCS_SERVICE_ACCOUNT_KEY:
        required: true
      GH_TOKEN:
        required: true
permissions:
  contents: "write"
  pull-requests: "write"
