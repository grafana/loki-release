concurrency:
  group: "create-release-pr-${{ github.sha }}"
jobs:
  check:
    runs-on: "ubuntu-latest"
    steps:
    - name: "always green"
      run: "echo \"always green\""
      shell: "bash"
  create-release-pr:
    needs:
    - "dist"
    - "loki-image"
    - "promtail-image"
    runs-on: "ubuntu-latest"
    steps:
    - name: "pull loki code"
      uses: "actions/checkout@v3"
      with:
        path: "loki"
        ref: "prepare-release-please"
        repository: "grafana/loki"
    - name: "pull release code"
      uses: "actions/checkout@v3"
      with:
        path: "release"
        repository: "grafana/loki-release"
    - name: "setup go"
      uses: "actions/setup-go@v4"
      with:
        cache-dependency-path: "loki/go.sum"
        go-version-file: "loki/go.mod"
    - name: "setup node"
      uses: "actions/setup-node@v4"
      with:
        node-version: 16
    - id: "extract_branch"
      name: "extract branch name"
      run: |
        if [[ "${{ inputs.release_repo }}" == "grafana/loki" ]]; then
          cd loki
          echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        else
          cd release
          echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        fi
      shell: "bash"
    - id: "release"
      name: "release please"
      run: |
        echo "manifest file: ${manifest_file}"
        echo "current dir: $(pwd)"
        
        npm install
        npm exec -- release-please release-pr --token="${{ secrets.GH_TOKEN }}" --repo-url="${{ inputs.release_repo }}" --target-branch "${{ steps.extract_branch.outputs.branch }}" --labels "backport main"
      shell: "bash"
      working-directory: "release"
  dist:
    needs:
    - "test"
    - "lint"
    - "check"
    runs-on: "ubuntu-latest"
    steps:
    - name: "pull loki code"
      uses: "actions/checkout@v3"
      with:
        path: "loki"
        ref: "prepare-release-please"
        repository: "grafana/loki"
    - name: "setup go"
      uses: "actions/setup-go@v4"
      with:
        cache-dependency-path: "loki/go.sum"
        go-version-file: "loki/go.mod"
    - env:
        ACTIONS_STEP_DEBUG: "true"
      name: "auth gcs"
      uses: "google-github-actions/auth@v2"
      with:
        credentials_json: "${{ secrets.GCS_SERVICE_ACCOUNT_KEY }}"
    - name: "install dependencies"
      run: |
        go install github.com/mitchellh/gox@9f71238
        go install github.com/bufbuild/buf/cmd/buf@v1.4.0
        go install github.com/golang/protobuf/protoc-gen-go@v1.3.1
        go install github.com/gogo/protobuf/protoc-gen-gogoslick@v1.3.0
        
        sudo apt update
        sudo apt install -qy musl gnupg ragel \
          file zip unzip jq gettext \
          protobuf-compiler libprotobuf-dev \
          libsystemd-dev jq
      shell: "bash"
    - name: "build artifacts"
      run: "make BUILD_IN_CONTAINER=false SKIP_ARM=true dist"
      shell: "bash"
      working-directory: "loki"
    - name: "pacakge artifacts"
      run: |
        tar -czf dist.tar.gz dist
      shell: "bash"
      working-directory: "loki"
    - env:
        ACTIONS_STEP_DEBUG: "true"
      name: "upload build artifacts"
      uses: "google-github-actions/upload-cloud-storage@v1"
      with:
        destination: "loki-build-artifacts/${{ github.sha }}/dist.tar.gz"
        path: "loki/dist.tar.gz"
  lint:
    runs-on: "ubuntu-latest"
    steps:
    - name: "always green"
      run: "echo \"always green\""
      shell: "bash"
  loki-image:
    needs:
    - "test"
    - "lint"
    - "check"
    runs-on: "ubuntu-latest"
    steps:
    - name: "always green"
      run: "echo \"always green\""
      shell: "bash"
    strategy:
      fail-fast: true
      matrix:
        platform:
        - "linux/amd64"
        - "linux/arm64"
        - "linux/arm"
  promtail-image:
    needs:
    - "test"
    - "lint"
    - "check"
    runs-on: "ubuntu-latest"
    steps:
    - name: "always green"
      run: "echo \"always green\""
      shell: "bash"
    strategy:
      fail-fast: true
      matrix:
        platform:
        - "linux/amd64"
        - "linux/arm64"
        - "linux/arm"
  test:
    runs-on: "ubuntu-latest"
    steps:
    - name: "always green"
      run: "echo \"always green\""
      shell: "bash"
name: "create release PR"
"on":
  workflow_call:
    inputs:
      release_repo:
        default: "grafana/loki"
        description: "repo to make release PRs against"
        required: false
        type: "string"
    secrets:
      GCS_SERVICE_ACCOUNT_KEY:
        required: true
      GH_TOKEN:
        required: true
permissions:
  contents: "write"
  issues: "write"
  pull-requests: "write"
